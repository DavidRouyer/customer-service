on:
  pull_request:
    branches: [main]

jobs:
  build:
    permissions:
      contents: "read"
      id-token: "write"
      checks: "write"
      pull-requests: "write"

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: "yarn"

      - name: Install dependencies
        run: yarn

      - name: Execute unit tests
        run: yarn test

      - name: Get PR sha
        id: get_pull_request_sha
        run: |
          pull_request_sha=$(jq --raw-output .pull_request.base.sha "$GITHUB_EVENT_PATH" | cut -c1-8)
          echo "pull_request_sha=${pull_request_sha}" >> $GITHUB_OUTPUT
          echo $pull_request_sha

      - name: Neon Database Create Branch Action
        uses: neondatabase/create-branch-action@v4
        id: create_branch
        with:
          project_id: ${{ secrets.NEON_PROJECT_ID }}
          parent: dev
          branch_name: ${{steps.get_pull_request_sha.outputs.pull_request_sha}}
          api_key: ${{ secrets.NEON_API_KEY }}
          username: ${{ secrets.PG_USERNAME }}

      - name: Build backend
        run: yarn build:backend
        env:
          DATABASE_URL: "${{ steps.create_branch.outputs.db_url_with_pooler }}/neondb?pgbouncer=true&connect_timeout=10"
          DIRECT_DATABASE_URL: "${{ steps.create_branch.outputs.db_url }}/neondb?connect_timeout=10"
          CORS_ORIGIN: "*"

      - name: Run Prisma Migrate
        run: |
          yarn turbo db:migrate:deploy
        env:
          DATABASE_URL: "${{ steps.create_branch.outputs.db_url_with_pooler }}/neondb?pgbouncer=true&connect_timeout=10"
          DIRECT_DATABASE_URL: "${{ steps.create_branch.outputs.db_url }}/neondb?connect_timeout=10"

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          token_format: access_token
          workload_identity_provider: "${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.GCP_SA_EMAIL }}"

      - name: Login to Docker
        uses: "docker/login-action@v2"
        with:
          registry: "gcr.io"
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"

      - name: Configure Docker
        run: |-
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://gcr.io

      - name: Build Docker image
        run: |
          docker build -f apps/backend/Dockerfile -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/customer-service:${{ github.event.number }} .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/customer-service:${{ github.event.number }}

      - id: "deploy"
        name: Deploy to Cloud Run
        uses: "google-github-actions/deploy-cloudrun@v1"
        with:
          image: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/customer-service:${{ github.event.number }}"
          service: "customer-service"
          region: "europe-west9"
          flags: "--max-instances=1 --allow-unauthenticated"
          tag: "pr-${{ github.event.number }}"
          no_traffic: true
          env_vars: |
            DATABASE_URL=${{ steps.create_branch.outputs.db_url_with_pooler }}/neondb?pgbouncer=true&connect_timeout=10
            DIRECT_DATABASE_URL=${{ steps.create_branch.outputs.db_url }}/neondb?connect_timeout=10

      - name: Build front-end
        run: yarn build:frontend
        env:
          VITE_ENDPOINT_URL: ${{ steps.deploy.outputs.url }}

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_CUSTOMER_SERVICE_DEFEA }}"
          projectId: customer-service-defea
